From 4ed9e7c6fed20996fe8750eba7be4387d978d952 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ricardo=20Gon=C3=A7alves?= <ricardo@mytiki.com>
Date: Wed, 16 Nov 2022 12:58:58 -0300
Subject: [PATCH] update release action

---
 packages/flutter_tools/gradle/flutter.gradle | 115 +++++++++++++------
 1 file changed, 79 insertions(+), 36 deletions(-)

diff --git a/packages/flutter_tools/gradle/flutter.gradle b/packages/flutter_tools/gradle/flutter.gradle
index 7a37e4eb22..4a13ad8ca7 100644
--- a/packages/flutter_tools/gradle/flutter.gradle
+++ b/packages/flutter_tools/gradle/flutter.gradle
@@ -1028,47 +1028,90 @@ class FlutterPlugin implements Plugin<Project> {
         Project appProject = project.rootProject.findProject(":${hostAppProjectName}")
         assert appProject != null : "Project :${hostAppProjectName} doesn't exist. To custom the host app project name, set `org.gradle.project.flutter.hostAppProjectName=<project-name>` in gradle.properties."
         // Wait for the host app project configuration.
+//        appProject.afterEvaluate {
+//            assert appProject.android != null
+//            project.android.libraryVariants.all { libraryVariant ->
+//                Task copyFlutterAssetsTask
+//                appProject.android.applicationVariants.all { appProjectVariant ->
+//                    Task appAssembleTask = getAssembleTask(appProjectVariant)
+//                    if (!shouldConfigureFlutterTask(appAssembleTask)) {
+//                        return
+//                    }
+//                    // Find a compatible application variant in the host app.
+//                    //
+//                    // For example, consider a host app that defines the following variants:
+//                    // | ----------------- | ----------------------------- |
+//                    // |   Build Variant   |   Flutter Equivalent Variant  |
+//                    // | ----------------- | ----------------------------- |
+//                    // |   freeRelease     |   release                      |
+//                    // |   freeDebug       |   debug                       |
+//                    // |   freeDevelop     |   debug                       |
+//                    // |   profile         |   profile                     |
+//                    // | ----------------- | ----------------------------- |
+//                    //
+//                    // This mapping is based on the following rules:
+//                    // 1. If the host app build variant name is `profile` then the equivalent
+//                    //    Flutter variant is `profile`.
+//                    // 2. If the host app build variant is debuggable
+//                    //    (e.g. `buildType.debuggable = true`), then the equivalent Flutter
+//                    //    variant is `debug`.
+//                    // 3. Otherwise, the equivalent Flutter variant is `release`.
+//                    String variantBuildMode = buildModeFor(libraryVariant.buildType)
+//                    if (buildModeFor(appProjectVariant.buildType) != variantBuildMode) {
+//                        return
+//                    }
+//                    if (copyFlutterAssetsTask == null) {
+//                        copyFlutterAssetsTask = addFlutterDeps(libraryVariant)
+//                    }
+//                    Task mergeAssets = project
+//                        .tasks
+//                        .findByPath(":${hostAppProjectName}:merge${appProjectVariant.name.capitalize()}Assets")
+//                    assert mergeAssets
+//                    mergeAssets.dependsOn(copyFlutterAssetsTask)
+//                }
+//            }
+//        }
         appProject.afterEvaluate {
             assert appProject.android != null
             project.android.libraryVariants.all { libraryVariant ->
-                Task copyFlutterAssetsTask
-                appProject.android.applicationVariants.all { appProjectVariant ->
-                    Task appAssembleTask = getAssembleTask(appProjectVariant)
-                    if (!shouldConfigureFlutterTask(appAssembleTask)) {
-                        return
-                    }
-                    // Find a compatible application variant in the host app.
-                    //
-                    // For example, consider a host app that defines the following variants:
-                    // | ----------------- | ----------------------------- |
-                    // |   Build Variant   |   Flutter Equivalent Variant  |
-                    // | ----------------- | ----------------------------- |
-                    // |   freeRelease     |   release                      |
-                    // |   freeDebug       |   debug                       |
-                    // |   freeDevelop     |   debug                       |
-                    // |   profile         |   profile                     |
-                    // | ----------------- | ----------------------------- |
-                    //
-                    // This mapping is based on the following rules:
-                    // 1. If the host app build variant name is `profile` then the equivalent
-                    //    Flutter variant is `profile`.
-                    // 2. If the host app build variant is debuggable
-                    //    (e.g. `buildType.debuggable = true`), then the equivalent Flutter
-                    //    variant is `debug`.
-                    // 3. Otherwise, the equivalent Flutter variant is `release`.
-                    String variantBuildMode = buildModeFor(libraryVariant.buildType)
-                    if (buildModeFor(appProjectVariant.buildType) != variantBuildMode) {
-                        return
-                    }
-                    if (copyFlutterAssetsTask == null) {
-                        copyFlutterAssetsTask = addFlutterDeps(libraryVariant)
+                String variantBuildMode = buildModeFor(libraryVariant.buildType) //MOVED
+                Task copyFlutterAssetsTask = addFlutterDeps(libraryVariant) //MOVED
+                if (appProject.android.hasProperty("applicationVariants")) { //NEW
+                    appProject.android.applicationVariants.all { appProjectVariant ->
+                        Task appAssembleTask = getAssembleTask(appProjectVariant)
+                        if (!shouldConfigureFlutterTask(appAssembleTask)) {
+                            return
+                        }
+
+                        if (buildModeFor(appProjectVariant.buildType) != variantBuildMode) {
+                            return
+                        }
+
+                        //REMOVED variantbuildmode and copyFlutterAssetsTask lines
+
+                        Task mergeAssets = project
+                                .tasks
+                                .findByPath(":${hostAppProjectName}:merge${appProjectVariant.name.capitalize()}Assets")
+                        assert mergeAssets
+                        mergeAssets.dependsOn(copyFlutterAssetsTask)
                     }
-                    Task mergeAssets = project
-                        .tasks
-                        .findByPath(":${hostAppProjectName}:merge${appProjectVariant.name.capitalize()}Assets")
-                    assert mergeAssets
-                    mergeAssets.dependsOn(copyFlutterAssetsTask)
                 }
+                if(appProject.android.hasProperty("libraryVariants")) { //NEW
+                    appProject.android.libraryVariants.all { appProjectVariant -> //NEW
+                        Task appAssembleTask = getAssembleTask(appProjectVariant) //NEW
+                        if (!shouldConfigureFlutterTask(appAssembleTask)) { //NEW
+                            return //NEW
+                        }
+                        if (buildModeFor(appProjectVariant.buildType) != variantBuildMode) { //NEW
+                            return //NEW
+                        }
+                        Task mergeAssets = project //NEW
+                                .tasks
+                                .findByPath(":${hostAppProjectName}:merge${appProjectVariant.name.capitalize()}Assets")
+                        assert mergeAssets //NEW
+                        mergeAssets.dependsOn(copyFlutterAssetsTask) //NEW
+                    } //NEW
+                } //NEW
             }
         }
         configurePlugins()
-- 
2.33.0

