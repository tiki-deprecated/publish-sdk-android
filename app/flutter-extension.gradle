import groovy.lang.Closure
import org.gradle.api.Project
import org.gradle.api.GradleException
import java.nio.file.Paths

//modified from: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/gradle/flutter.gradle

class Constants {
    static final String MAVEN_REPOSITORY = "https://storage.googleapis.com/download.flutter.io";
    static final String ENGINE_VERSION = '1.0.0-857bd6b74c5eb56151bfafe91e7fa6a82b6fee25'

/** The platforms that can be passed to the `--Ptarget-platform` flag. */
    static final String PLATFORM_ARM32 = "android-arm";
    static final String PLATFORM_ARM64 = "android-arm64";
    static final String PLATFORM_X86 = "android-x86";
    static final String PLATFORM_X86_64 = "android-x64";

/** The ABI architectures supported by Flutter. */
    static final String ARCH_ARM32 = "armeabi-v7a";
    static final String ARCH_ARM64 = "arm64-v8a";
    static final String ARCH_X86 = "x86";
    static final String ARCH_X86_64 = "x86_64";

/** Maps platforms to ABI architectures. */
    static final Map PLATFORM_ARCH_MAP = [
            (PLATFORM_ARM32) : ARCH_ARM32,
            (PLATFORM_ARM64) : ARCH_ARM64,
            (PLATFORM_X86)   : ARCH_X86,
            (PLATFORM_X86_64): ARCH_X86_64,
    ]

    static final List DEFAULT_PLATFORMS = [
            PLATFORM_ARM32,
            PLATFORM_ARM64,
            PLATFORM_X86_64,
    ]
}

public void addRepository(Project project){
    project.repositories.maven {
        url Constants.MAVEN_REPOSITORY
    }
}

public void addDependencies(Project project){
    project.android.buildTypes.forEach{ buildType ->
        String flutterBuildMode = buildModeFor(buildType)
        addApiDependencies(project, buildType.name,
                "io.flutter:flutter_embedding_$flutterBuildMode:${Constants.ENGINE_VERSION}")
        List<String> platforms = getTargetPlatforms(project).collect()
        if (flutterBuildMode == "debug") {
            platforms.add("android-x86")
            platforms.add("android-x64")
        }
        platforms.each { platform ->
            String arch = Constants.PLATFORM_ARCH_MAP[platform].replace("-", "_")
            addApiDependencies(project, buildType.name,
                    "io.flutter:${arch}_$flutterBuildMode:${Constants.ENGINE_VERSION}")
        }
    }
}

private static List<String> getTargetPlatforms(Project project) {
    if (!project.hasProperty('target-platform')) {
        return Constants.DEFAULT_PLATFORMS
    }
    return project.property('target-platform').split(',').collect {
        if (!Constants.PLATFORM_ARCH_MAP[it]) {
            throw new GradleException("Invalid platform: $it.")
        }
        return it
    }
}

private static String buildModeFor(buildType) {
    if (buildType.name == "profile") {
        return "profile"
    } else if (buildType.debuggable) {
        return "debug"
    }
    return "release"
}

private static void addApiDependencies(Project project, String variantName, Object dependency, Closure config = null) {
    String configuration;
    if (project.getConfigurations().findByName("api")) {
        configuration = "${variantName}Api";
    } else {
        configuration = "${variantName}Compile";
    }
    project.dependencies.add(configuration, dependency, config)
}
