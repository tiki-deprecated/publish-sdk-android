buildscript {
    ext.flutterEngine = "1.0.0-45f6e009110df4f34ec2cf99f63cf73b71b7a420"
    ext.sdkVersion = "2.0.6"
    ext.markwon_version = "4.6.2"
    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }
    dependencies {
        classpath 'com.github.kezong:fat-aar:1.3.8'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
    }
}

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
    id 'signing'
}

android {
    compileSdk 33
    defaultConfig {
        minSdk 21
        versionCode 33
        versionName "2.2.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    publishing {
        singleVariant("release") {
            withSourcesJar()
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    lint {
        baseline = file("lint-baseline.xml")
    }

    buildFeatures {
        viewBinding true
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    namespace 'com.mytiki.tiki_sdk_android'
}

apply plugin: 'com.kezong.fat-aar'
apply plugin: 'kotlin-kapt'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'

    implementation "io.noties.markwon:core:$markwon_version"
    implementation "io.noties.markwon:html:$markwon_version"
    implementation "io.noties.markwon:ext-tables:$markwon_version"
    implementation 'androidx.core:core-ktx:1.10.1'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    debugEmbed "io.flutter:flutter_embedding_release:$flutterEngine"
    releaseEmbed "io.flutter:flutter_embedding_release:$flutterEngine"

    debugEmbed "com.mytiki.tiki_sdk_native:flutter_release:$sdkVersion"
    releaseEmbed "com.mytiki.tiki_sdk_native:flutter_release:$sdkVersion"

    debugEmbed "com.it_nomads.fluttersecurestorage:flutter_secure_storage_release:$sdkVersion"
    releaseEmbed "com.it_nomads.fluttersecurestorage:flutter_secure_storage_release:$sdkVersion"

    debugEmbed "eu.simonbinder.sqlite3_flutter_libs:sqlite3_flutter_libs_release:$sdkVersion"
    releaseEmbed "eu.simonbinder.sqlite3_flutter_libs:sqlite3_flutter_libs_release:$sdkVersion"
}

apply plugin: "org.jetbrains.dokka"
tasks.dokkaHtml.configure {
    outputDirectory.set(file("../doc/api"))
    dokkaSourceSets {
        configureEach {
            perPackageOption {
                matchingRegex.set(".*core.*")
                suppress.set(true)
            }

            perPackageOption {
                matchingRegex.set(".*activities.*")
                suppress.set(true)
            }
        }
    }
}

def groovyShell = new GroovyShell()
def addDll = groovyShell.parse(new File("$rootDir/app/add-dll.gradle"))

addDll.clean(rootDir.toString())
addDll.flutter(rootDir.toString(), flutterEngine)
addDll.sqlite(rootDir.toString())

apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'

nexusStaging {
    serverUrl = "https://s01.oss.sonatype.org/service/local/"
    packageGroup = "com.mytiki"
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    def signingKey = System.getenv("PGP_PRIVATE_KEY")
    def signingPassword = System.getenv("PGP_PASSPHRASE")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                groupId = 'com.mytiki'
                artifactId = 'tiki-sdk-android'
                version = android.getDefaultConfig().getVersionName()
                pom {
                    name = 'TIKI SDK [Android]'
                    description = "A package for adding TIKI's decentralized infrastructure to Android projects. Add tokenized data ownership, consent, and rewards to your app in minutes."
                    url = 'https://mytiki.com/docs'
                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://github.com/tiki/tiki-sdk-android/blob/main/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            name = 'The TIKI Team'
                            email = 'hello@mytiki.com'
                            organization = 'TIKI'
                            organizationUrl = 'https://mytiki.com'
                        }
                    }
                    scm {
                        url = 'https://github.com/tiki/tiki-sdk-android'
                        tag = android.getDefaultConfig().getVersionName()
                    }
                }
            }
        }
        repositories {
            maven {
                name = 'localRepo'
                url = layout.buildDirectory.dir("repo")
            }
            maven {
                name = "OSSRH"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = System.getenv('OSSRH_USER')
                    password = System.getenv('OSSRH_TOKEN')
                }
            }
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/tiki/tiki-sdk-android"
                credentials {
                    username = System.getenv("GITHUB_USER")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }

}
