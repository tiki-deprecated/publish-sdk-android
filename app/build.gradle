import groovy.lang.Closure
import org.gradle.api.Project
import org.gradle.api.GradleException
import java.nio.file.Paths

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
    id 'signing'
}

android {

    compileSdk 33

    defaultConfig {
        minSdk 21
        versionCode 1
        versionName "0.0.2"

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lint {
        baseline = file("lint-baseline.xml")
    }

    buildFeatures {
        viewBinding true
    }
}
//
//signing {
//    sign publishing.publications
//}

//afterEvaluate {
//    publishing {
//        publications {
//            release(MavenPublication) {
//                from components.release
//
//                groupId = 'com.mytiki'
//                artifactId = 'tiki_sdk_android'
//                version = '0.0.2'
//
//            }
//        }
//        repositories {
//            maven {
//                    name = 'localRepo'
//                    url = layout.buildDirectory.dir("repo")
//                }
//            if(System.getenv('PUBLISH_TO_OSSRH') != null) {
//                maven {
//                    name = "OSSRH"
//                    url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
//                    credentials {
//                        username = System.getenv('OSSRH_USERNAME')
//                        password = System.getenv('OSSRH_PASSWORD')
//                    }
//                }
//            }
//            if(System.getenv('PUBLISH_TO_GITHUB') != null) {
//                maven {
//                    name = "GitHubPackages"
//                    url = "https://maven.pkg.github.com/tiki/tiki-sdk-android"
//                    credentials {
//                        username = System.getenv("GITHUB_ACTOR")
//                        password = System.getenv("GITHUB_TOKEN")
//                    }
//                }
//            }
//        }
//    }
//}

dependencies {
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.2'

    implementation "androidx.multidex:multidex:2.0.1"

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.6.1'
//
//    testImplementation 'junit:junit:4.13.2'
//
//    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
}

// def groovyShell = new GroovyShell()
// def flutter_deps = groovyShell.parse( new File("$rootDir/app/flutter_deps.gradle") )

/** The platforms that can be passed to the `--Ptarget-platform` flag. */
final String PLATFORM_ARM32  = "android-arm";
final String PLATFORM_ARM64  = "android-arm64";
final String PLATFORM_X86    = "android-x86";
final String PLATFORM_X86_64 = "android-x64";


/** The ABI architectures supported by Flutter. */
final String ARCH_ARM32      = "armeabi-v7a";
final String ARCH_ARM64      = "arm64-v8a";
final String ARCH_X86        = "x86";
final String ARCH_X86_64     = "x86_64";
/** Maps platforms to ABI architectures. */
final Map PLATFORM_ARCH_MAP = [
        (PLATFORM_ARM32)    : ARCH_ARM32,
        (PLATFORM_ARM64)    : ARCH_ARM64,
        (PLATFORM_X86)      : ARCH_X86,
        (PLATFORM_X86_64)   : ARCH_X86_64,
]

//String flutterRootPath
//Properties localProperties = readPropertiesIfExist(new File(project.projectDir.parentFile, "local.properties"))
//if (project.hasProperty("flutter.sdk")) {
//    flutterRootPath = project.property("flutter.sdk")
//}
//if (flutterRootPath == null) {
//    flutterRootPath = localProperties.getProperty("flutter.sdk")
//}
//if (flutterRootPath == null) {
//    flutterRootPath = System.env.FLUTTER_ROOT
//}
//if (flutterRootPath == null) {
//    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file or with a FLUTTER_ROOT environment variable.")
//}
//File flutterRoot = project.file(flutterRootPath)
//if (!flutterRoot.isDirectory()) {
//    throw new GradleException("flutter.sdk must point to the Flutter SDK directory")
//}
//final String engineVersion = useLocalEngine()
//        ? "+" // Match any version since there's only one.
//        : "1.0.0-" + Paths.get(flutterRoot.absolutePath, "bin", "internal", "engine.version").toFile().text.trim()

final String engineVersion = '1.0.0-857bd6b74c5eb56151bfafe91e7fa6a82b6fee25'
final String DEFAULT_MAVEN_HOST = "https://storage.googleapis.com";
String hostedRepository = System.env.FLUTTER_STORAGE_BASE_URL ?: DEFAULT_MAVEN_HOST
String repository = //useLocalEngine() ? project.property('local-engine-repo'):
    "https://storage.googleapis.com/download.flutter.io"

project.repositories {
    mavenCentral()
    google()
    maven {
        url repository
    }
}
project.android.buildTypes.forEach{ buildType ->

    String flutterBuildMode = buildModeFor(buildType)
    if (!supportsBuildMode(flutterBuildMode)) {
        return
    }
    // The embedding is set as an API dependency in a Flutter plugin.
    // Therefore, don't make the app project depend on the embedding if there are Flutter
    // plugins.
    // This prevents duplicated classes when using custom build types. That is, a custom build
    // type like profile is used, and the plugin and app projects have API dependencies on the
    // embedding.
//    if (!isFlutterAppProject() || getPluginList().size() == 0) {
//        addApiDependencies(project, buildType.name,
//                "io.flutter:flutter_embedding_$flutterBuildMode:$engineVersion")
//    }
    String configuration;
    // `compile` dependencies are now `api` dependencies.
    if (project.getConfigurations().findByName("api")) {
        configuration = "${buildType.name}Api";
    } else {
        configuration = "${buildType.name}Compile";
    }
    project.dependencies.add(configuration, "io.flutter:flutter_embedding_$flutterBuildMode:$engineVersion", null)
    List<String> platforms = getTargetPlatforms().collect()
    // Debug mode includes x86 and x64, which are commonly used in emulators.
    if (flutterBuildMode == "debug" && !useLocalEngine()) {
        platforms.add("android-x86")
        platforms.add("android-x64")
    }
    platforms.each { platform ->
        String arch = PLATFORM_ARCH_MAP[platform].replace("-", "_")
        // Add the `libflutter.so` dependency.
        configuration;
        // `compile` dependencies are now `api` dependencies.
        if (project.getConfigurations().findByName("api")) {
            configuration = "${buildType.name}Api";
        } else {
            configuration = "${buildType.name}Compile";
        }
        println "${arch}_$flutterBuildMode"

        //if(flutterBuildMode != "debug" || (arch != "armeabi_v7a" && arch != "arm64_v8a" && arch != 'armeabi-v7a' && arch != 'arm64-v8a' && arch != 'x86_64' && arch != 'x86')) {
            project.dependencies.add(configuration, "io.flutter:${arch}_$flutterBuildMode:$engineVersion", null)
        //}
    }
}

private static String buildModeFor(buildType) {
    if (buildType.name == "profile") {
        return "profile"
    } else if (buildType.debuggable) {
        return "debug"
    }
    return "release"
}

private Boolean supportsBuildMode(String flutterBuildMode) {
    if (!useLocalEngine()) {
        return true;
    }
    assert project.hasProperty('local-engine-build-mode')
    // Don't configure dependencies for a build mode that the local engine
    // doesn't support.
    return project.property('local-engine-build-mode') == flutterBuildMode
}

private Boolean useLocalEngine() {
    return project.hasProperty('local-engine-repo')
}

private boolean isFlutterAppProject() {
    return project.android.hasProperty("applicationVariants")
}

private static List<String> getTargetPlatforms() {
    final String PLATFORM_ARM32  = "android-arm";
    final String PLATFORM_ARM64  = "android-arm64";
    final String PLATFORM_X86    = "android-x86";
    final String PLATFORM_X86_64 = "android-x64";
//    if (!project.hasProperty('target-platform')) {
    return [
            PLATFORM_ARM32,
            PLATFORM_ARM64,
            PLATFORM_X86_64,
    ]
//    }
//    return project.property('target-platform').split(',').collect {
//        if (!PLATFORM_ARCH_MAP[it]) {
//            throw new GradleException("Invalid platform: $it.")
//        }
//        return it
//    }
}

private static Properties readPropertiesIfExist(File propertiesFile) {
    Properties result = new Properties()
    if (propertiesFile.exists()) {
        propertiesFile.withReader('UTF-8') { reader -> result.load(reader) }
    }
    return result
}